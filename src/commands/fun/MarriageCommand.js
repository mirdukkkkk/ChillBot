const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const ChillBotCommand = require('../../structures/ChillBotCommand');

class MarriageCommand extends ChillBotCommand {
    constructor() {
        super('marriage', {
            description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å –ª—é–±—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞ üè≥Ô∏è‚Äçüåà',
            category: 'fun',
            usage: '<ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ/cancel(canc, c)>',
            aliases: ['marry', 'm'],
            cooldown: 15
        });
    }

    async run(message, args) {
        const option = args[0];
        switch(option) {
            case 'c':
            case 'canc':
            case 'cancel': {
                const data = await message.client.database.collection('users').findOne({ id: message.author.id });

                if(!data.married) return message.client.embconstructor.fail(`${message.client.constants.emojis.info} | –í—ã –∏ —Ç–∞–∫ –Ω–µ –∂–µ–Ω–∞—Ç—ã`, message);

                message.reply({ 
                    embeds: [
                        new EmbedBuilder()
                        .setTitle(`–£—Å–ø–µ—à–Ω–æ`)
                        .setDescription(`üíç | –ë—Ä–∞–∫ –±—ã–ª —Ä–∞–∑–æ—Ä–≤–∞–Ω`)
                        .setColor('#1690FF')
                        .setTimestamp()
                    ]
                });

                message.client.database.collection('users').updateOne({ id: message.author.id }, { $set: { married: null } });
                message.client.database.collection('users').updateOne({ id: data.married }, { $set: { married: null } });
            }

            default: {
                const user = message.mentions.members.first() || message.guild.members.cache.get(args[0]);
                const data = await message.client.database.collection('users').findOne({ id: user.id });

                if(user.id === message.author.id) return message.client.embconstructor.fail(`${message.client.constants.emojis.info} | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ :(`, message);
                if(user.bot) return message.client.embconstructor.fail(`${message.client.constants.emojis.info} | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –±–æ—Ç–µ`, message);
                if(data.married) return message.client.embconstructor.fail(`${message.client.constants.emojis.info} | –í—ã —É–∂–µ –∂–µ–Ω–∞—Ç—ã —Å ${(message.guild.members.cache.get(data.married)?.nickname || message.client.users.cache.get(data.married)?.username) || data.married}`, message);

                const _msg = await message.channel.send({ 
                    embeds: [
                        new EmbedBuilder()
                        .setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`)
                        .setDescription(`üíç | ${message.author} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ø–æ–∂–µ–Ω–∏—Ç—Å—è, –Ω–∞ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞`)
                        .setColor('#1690FF')
                        .setTimestamp()
                    ],
                    components: [
                        new ActionRowBuilder()
                        .setComponents(
                            new ButtonBuilder()
                            .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
                            .setStyle(ButtonStyle.Success)
                            .setCustomId('1_marry_choose'),
                            new ButtonBuilder()
                            .setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
                            .setStyle(ButtonStyle.Danger)
                            .setCustomId('2_marry_choose'),
                        )
                    ]
                });

                const collector = message.channel.createMessageComponentCollector({ filter: (i) => i.user.id === user.id && i.message.id === _msg.id && i.customId.endsWith("_marry_choose"), time: 60000 })
                .on('collect', (i) => collector.stop(i.customId[0]))
                .on('end', (f, r) => {
                    switch(r) {
                        case 'time': {
                            _msg.reply({
                                embeds: [
                                    new EmbedBuilder()
                                    .setTitle('–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã—à–ª–æ')
                                    .setColor('#1690FF')
                                    .setTimestamp()
                                ]
                            });

                            _msg.edit({
                                embeds: [_msg.embeds[0]],
                                components: []
                            });
                            break;
                        }

                        case '2': {
                            _msg.reply({
                                embeds: [
                                    new EmbedBuilder()
                                    .setTitle('–û—Ç–∫–∞–∑')
                                    .setDescription(`${user} –æ—Ç–∫–∞–∑–∞–ª(–ª—Å—è/–∞—Å—å) –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞`)
                                    .setColor('#FF3333')
                                    .setTimestamp()
                                ]
                            });

                            _msg.edit({
                                embeds: [_msg.embeds[0]],
                                components: []
                            });
                            break;
                        }

                        case '1': {
                            _msg.reply({
                                embeds: [
                                    new EmbedBuilder()
                                    .setTitle('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ')
                                    .setDescription(`üíç | ${user} –ø—Ä–∏–Ω—è–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞\n${message.client.constants.emojis.info} | –¢–µ–ø–µ—Ä—å ${user} –∏ ${message.author} –∂–µ–Ω–∞—Ç—ã!`)
                                    .setColor('#33FF33')
                                    .setTimestamp()
                                ]
                            });

                            _msg.edit({
                                embeds: [_msg.embeds[0]],
                                components: []
                            });

                            message.client.database.collection('users').updateOne({ id: message.author.id }, { $set: { married: user.id } });
                            message.client.database.collection('users').updateOne({ id: user.id }, { $set: { married: message.author.id } });
                            break;
                        }
                    }
                });
            }
        }
    }
}

module.exports = MarriageCommand;