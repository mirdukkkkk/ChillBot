const ChillBotCommand = require('../../structures/ChillBotCommand');
const ChillBotConfirmation = require('../../utils/ChillBotConfirmation');
const { MessageEmbed } = require(`discord.js`);

class BadgesCommand extends ChillBotCommand {
    constructor() {
        super('badges', {
            description: '–í—ã–¥–∞—ë—Ç –∑–Ω–∞—á–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ü–µ–ª–∏',
            category: 'special',
            usage: '<ID/–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ> <ID –∑–Ω–∞—á–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç–µ –≤—ã–¥–∞—Ç—å/–æ—Ç–Ω—è—Ç—å>',
            args: true,
            public: false,
            cooldown: 3
        });
    }

    async run(message, args) {
        if(!message.client.constants.special_access.includes(message.author.id)) return message.react('‚ùå');
        let member = message.mentions.members.first() || message.guild.members.cache.get(args[0]);
        if(!member) return message.fail(`${message.client.settings.emojis.warning} | –£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!`);
        let data = await message.client.database.collection('users').findOne({ userID: member.id });
        if(!data) return message.fail(`${message.client.settings.emojis.warning} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n${message.client.settings.emojis.info} | –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`);
        if(!message.client.constants.badgesArray.includes(args[1])) return message.fail(`${message.client.settings.emojis.warning} | –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∑–Ω–∞—á–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);

        await new ChillBotConfirmation(message.client, message.author).init(new MessageEmbed().setTitle(`${message.client.settings.emojis.info} | –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!`).setColor(message.client.settings.colors.main).setDescription(`üë§ | –í—ã –≤—ã–¥–∞—ë—Ç–µ/–∑–∞–±–∏—Ä–∞–µ—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: \`${member.nickname || member.user.username}\`\nüèÖ | –ó–Ω–∞—á–æ–∫: \`${args[1]}\`\nüî® | –ö–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ç–∞–∫–æ–π –≤–∏–¥: ${message.client.constants.badges[args[1]]}\n\n${message.client.settings.emojis.info} | –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ "–û—Ç–º–µ–Ω–∞"`).setFooter('–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –ú–æ—Ä–∫–æ–≤–∫–æ–π', message.client.users.cache.get(message.client.constants.special_access[0]).displayAvatarURL({ dynamic: true })), message.channel).then(async (response) => {
            if(response) {
                try {
                    message.client.database.collection('users').updateOne({ userID: member.id }, {
                        [data.badges.includes(args[1]) ? '$pull' : '$push']: {
                            badges: args[1]
                        }
                    });
                    message.react(message.client.settings.emojis.done);
                } catch(error) {
                    message.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!\n${error}`);
                }
            } else {
                message.react(`848208109414645810`);
                return message.fail(`${message.client.settings.emojis.info} | –û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞`);
            }
        });
    }
}

module.exports = BadgesCommand;