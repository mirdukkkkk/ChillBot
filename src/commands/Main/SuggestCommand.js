/* eslint-disable */
const { MessageEmbed, Collection } = require('discord.js');
const ChillBotConfirmation = require('../../utils/ChillBotConfirmation');
const ChillBotCommand = require('../../structures/ChillBotCommand');

const cooldown = new Collection();

class SuggestCommand extends ChillBotCommand {
    constructor() {
        super('suggest', {
            description: `–ü–æ—Å—ã–ª–∞–µ—Ç –≤–∞—à–∏ –∏–¥–µ–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª`,
            category: 'main',
            usage: '<–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>',
            cooldown: 3,
            args: true,
            aliases: ['sg']
        });
    }

    get buttons() {
        return [
            {
                type: 2,
                style: 4,
                custom_id: 'delete',
                label: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
            }
        ]
    }

    async run(message, args) {
        if(args.join(' ').length > 1024) message.fail(`${message.client.settings.emojis.info} | –î–ª–∏–Ω–Ω–∞ –∏–¥–µ–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–ª–∏–Ω–Ω—É!`);
        let data = await message.client.database.collection('main').findOne({ name: 'guild' });
        if(!data.ideaChannel) return message.fail(`${message.client.settings.emojis.info} | –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã.`);
        if(data.ideaBlacklist?.includes(message.author.id)) return message.fail(`${message.client.settings.emojis.info} | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–ª—É—á–∞–π–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);

        await new ChillBotConfirmation(message.client, message.author).init(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`, message.channel).then(async (response) => {
            if(response) {
                const id = (data.ideas?.length ?? 0) + 1;
                const embed = new MessageEmbed().setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ${id}`).setColor(message.client.settings.colors.main).setDescription(args.join(' ')).addField(`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è:`, `–ê–≤—Ç–æ—Ä: **${message.author.tag}** (${message.author.id})\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: **${new Date().toLocaleString('ru')}**`).setFooter(message.guild.name, message.guild.iconURL()).setTimestamp().toJSON();
                const m = await message.client.api.channels(data.ideaChannel).messages.post({
                    data: {
                        content: null,
                        embed: embed,
                        components: [
                            {
                                type: 1,
                                components: this.buttons
                            }
                        ]
                    }
                });
                ['üëç', 'üëé'].forEach((r) => message.guild.channels.cache.get(data.ideaChannel).messages.cache.get(m.id).react(r));
                message.client.database.collection('main').updateOne({ name: 'guild' }, {
                    $push: {
                        ideas: {
                            id,
                            message: m.id
                        }
                    }
                });
                message.client.cache.buttons.set(m.id, async (res) => {
                    switch(res.data.custom_id) {
                        case 'delete': {
                            if(res.member.permissions.has('MANAGE_GUILD') || res.member.id === message.author.id) {
                                /*
                                message.client.database.collection('main').updateOne({ name: 'guild' }, {
                                    $pull: {
                                        ideas: { id }
                                    }
                                });
                                */
                                await message.client.api.channels(data.ideaChannel).messages(m.id).delete().catch(null);
                            }
                            break;
                        }
                    }
                });
                return message.reply(`–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª <#${data.ideaChannel}> (ID: **${id}**)`)
            } else message.fail(`${message.client.settings.emojis.info} | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
        });
    }
}

module.exports = SuggestCommand;