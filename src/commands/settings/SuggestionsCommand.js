const { MessageEmbed } = require('discord.js');
const ChillBotCommand = require('../../structures/ChillBotCommand');

class SuggestionsCommand extends ChillBotCommand {
    constructor() {
        super('suggestions', {
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
            category: 'settings',
            usage: '<channel/blacklist>',
            userPermissions: ['MANAGE_GUILD']
        });
    }

    async run(message, args) {
        const data = await message.client.database.collection('main').findOne({ name: 'guild' });
        const option = args[0];

        switch(option) {
            case 'channel': {
                const channel = message.mentions.channels.first() || message.guild.channels.cache.get(args[1]) || message.guild.channels.cache.find(c => c.name === args[1]);

                if(!channel) {
                    message.reply({
                        embeds: [
                            new MessageEmbed()
                            .setTitle(`${message.client.constants.emojis.done} | –£—Å–ø–µ—à–Ω–æ`)
                            .setColor('A5FF2A')
                            .setDescription(`üë§ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: \`${message.author.tag}\`\nüìù | –°–±—Ä–æ—Å–∏–ª –∫–∞–Ω–∞–ª –∏–¥–µ–π`)
                            .setFooter(message.guild.name, message.guild.iconURL({ dynamic: true }))
                            .setTimestamp()
                        ]
                    });
                    message.client.database.collection('main').updateOne({ name: 'guild' }, {
                        $set: {
                            ideaChannel: null
                        }
                    });
                    break;
                }
                if(!message.guild.channels.cache.has(channel?.id)) return message.client.embconstructor.fail(`${message.client.constants.emojis.warning} | –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.`, message);
                message.reply({
                    embeds: [
                        new MessageEmbed()
                        .setTitle(`${message.client.constants.emojis.done} | –£—Å–ø–µ—à–Ω–æ`)
                        .setColor('A5FF2A')
                        .setDescription(`üë§ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: \`${message.author.tag}\`\nüìù | –°–º–µ–Ω–∏–ª –∫–∞–Ω–∞–ª –∏–¥–µ–π –Ω–∞: <#${channel.id}>`)
                        .setFooter(message.guild.name, message.guild.iconURL({ dynamic: true }))
                        .setTimestamp()
                    ]
                });
                message.client.database.collection('main').updateOne({ name: 'guild' }, {
                    $set: {
                        ideaChannel: channel.id
                    }
                });
                break;
            }
            case 'blacklist': {
                const user = message.mentions.members.first() || message.guild.members.cache.get(args[1]);
                if(!user) return message.client.embconstructor.fail(`${message.client.constants.emojis.warning} | –£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–µ—Å—Ç–∏/–≤—ã–Ω–µ—Å—Ç–∏ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.`, message);
                if(user.permissions.has('MANAGE_GUILD') || user.roles.highest.position >= message.member.roles.highest.position) return message.client.embconstructor.fail(`${message.client.constants.emojis.warning} | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫`, message);
                message.reply(
                    new MessageEmbed()
                    .setTitle(`${message.client.constants.emojis.done} | –£—Å–ø–µ—à–Ω–æ`)
                    .setColor('A5FF2A')
                    .setDescription(`üë§ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${message.author.tag}\nüìù | ${!data.ideaBlacklist?.includes(user.id) ? '–í–Ω—ë—Å –≤ –ß–°' : '–í—ã–Ω–µ—Å –∏–∑ –ß–°'}: ${user.user.tag} (${user.id})`)
                    .setFooter(message.guild.name, message.guild.iconURL({ dynamic: true }))
                    .setTimestamp()
                );
                message.client.database.collection('main').updateOne({ name: 'guild' }, {
                    [data.ideaBlacklist?.includes(user.id) ? '$pull' : '$push']: {
                        ideaBlacklist: user.id
                    }
                });
                break;
            }
            default: {
                message.client.embconstructor.fail(`${message.client.constants.emojis.info} | –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é, –∏—Ö –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ 2: \`blacklist\`, \`channel\``, message);
                break;
            }
        }
    }
}

module.exports = SuggestionsCommand;